<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>UniversityProject - 日誌</title><link href="./" rel="alternate"></link><link href=".%5Cfeeds/ri-zhi.atom.xml" rel="self"></link><id>./</id><updated>2020-07-28T00:00:00+08:00</updated><entry><title>Jul 28, 2020 日誌</title><link href=".%5CJul_28_%202020.html" rel="alternate"></link><published>2020-07-28T00:00:00+08:00</published><updated>2020-07-28T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-28:.\Jul_28_ 2020.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;</content><category term="日誌"></category></entry><entry><title>Jul 27, 2020 日誌</title><link href=".%5CJul_27_%202020.html" rel="alternate"></link><published>2020-07-27T00:00:00+08:00</published><updated>2020-07-27T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-27:.\Jul_27_ 2020.html</id><summary type="html">&lt;p&gt;學opencv。CH6
</summary><content type="html">&lt;p&gt;學opencv。CH6
&lt;/p&gt;</content><category term="日誌"></category></entry><entry><title>Jul 26, 2020 日誌</title><link href=".%5CJul_26_%202020.html" rel="alternate"></link><published>2020-07-26T00:00:00+08:00</published><updated>2020-07-26T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-26:.\Jul_26_ 2020.html</id><summary type="html">&lt;p&gt;CH5。摸索 VScode 設定。
</summary><content type="html">&lt;p&gt;CH5。摸索 VScode 設定。
&lt;/p&gt;</content><category term="日誌"></category></entry><entry><title>Jul 25, 2020 日誌</title><link href=".%5CJul_25_%202020.html" rel="alternate"></link><published>2020-07-25T00:00:00+08:00</published><updated>2020-07-25T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-25:.\Jul_25_ 2020.html</id><summary type="html">&lt;p&gt;學opencv。CH4
</summary><content type="html">&lt;p&gt;學opencv。CH4
&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
&lt;/pre&gt;</content><category term="日誌"></category></entry><entry><title>Jul 24, 2020 日誌</title><link href=".%5CJul_24_%202020.html" rel="alternate"></link><published>2020-07-24T00:00:00+08:00</published><updated>2020-07-24T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-24:.\Jul_24_ 2020.html</id><summary type="html">&lt;p&gt;學習如何使用opencv。Chapter 3
</summary><content type="html">&lt;p&gt;學習如何使用opencv。Chapter 3
&lt;/p&gt;
&lt;h2&gt;Chapter 3 影像切割及調整尺寸&lt;/h2&gt;
&lt;h3&gt;調整影像尺寸( Resize )&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.opencv.org/3.0-beta/modules/imgproc/doc/geometric_transformations.html?highlight=resize#cv2.resize"&gt;Resize&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;影像切割&lt;/h3&gt;
&lt;pre class="brush: jscript"&gt;
import cv2

img = cv2.imread("lena.png")
print(img.shape)#show the image size(width,height,channel)

imgResize = cv2.resize(img,(1024,1024))#resize the lean.png:(image,(Y_size,X_size))
print(imgResize.shape)
print(imgResize.shape[:2])
imgCropped = img[200:388,220:355]#cut the image [y1:y2,x1:x2],the origin of image at upper left corner.

cv2.imshow("Image",img)
cv2.imshow("Image Resize",imgResize)
cv2.imshow("Cropped Image",imgCropped)

cv2.waitKey(0)
&lt;/pre&gt;</content><category term="日誌"></category><category term="opencv"></category><category term="resize"></category><category term="cropped"></category></entry><entry><title>Jul 23, 2020 日誌</title><link href=".%5CJul_23_%202020.html" rel="alternate"></link><published>2020-07-23T00:00:00+08:00</published><updated>2020-07-23T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-23:.\Jul_23_ 2020.html</id><summary type="html">&lt;p&gt;學習如何使用opencv。Chapter 1~2。
</summary><content type="html">&lt;p&gt;學習如何使用opencv。Chapter 1~2。
&lt;/p&gt;
&lt;h1&gt;Opencv&lt;/h1&gt;
&lt;p&gt;可用於影像處理、電腦視覺、影像辨識等。所以想說先去了解 Opencv 是要如何使用。目前是參考這個影片自己練習。&lt;/p&gt;
&lt;iframe width="1280" height="720" src="https://www.youtube.com/embed/WQeoO7MI0Bs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://www.murtazahassan.com/learn-opencv-3hours/"&gt;程式碼網頁&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Chapter 1 影像讀取&lt;/h2&gt;
&lt;p&gt;如何將讀取到的影像、影片或是 Webcam 用 Opencv 呼叫視窗顯示&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
import cv2

#------part 1 show the lena image
'''
img = cv2.imread("lena.png") #read the lena.png

cv2.imshow("Output",img) #show lena.png in "Output" window
cv2.waitKey(0) #"0" is mean: hold previous command to user press  anykey.
'''
#------part 2 show the mp4 video
'''
cap= cv2.VideoCapture("test_video.mp4")#read the test_video.mp4

while True:
    success,img = cap.read()
    cv2.imshow("Video",img)
    if cv2.waitKey(3) &amp; 0xFF ==ord('q'):
        break
'''
#------part 3 show the webcam vidoe stream 

cap = cv2.VideoCapture(0)#Catch camera0 video stream
cap.set(3,640) #width of the frames in the video stream
cap.set(4,480) #height of the frames in the video stream
cap.set(10,128) #brightness of the image (only for cameras)

while True:
    success,img = cap.read()
    cv2.imshow("Capture",img)
    if cv2.waitKey(1) &amp; 0xFF ==ord('q'):
        break
&lt;/pre&gt;

&lt;hr&gt;
&lt;h2&gt;Chapter 2&lt;/h2&gt;
&lt;p&gt;將影像色調轉換 ( 灰階 ) 、高斯模糊、 Canny （邊緣檢測）、 dilate （擴張）、 erode （侵蝕）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.opencv.org/3.0-beta/modules/cudaimgproc/doc/color.html?highlight=cvtcolor"&gt;色調轉換&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以將原本的顯示模式 (BGR) 切換成 RGB、HSV、Gray等顯示色調的模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.opencv.org/3.0-beta/modules/imgproc/doc/filtering.html?highlight=GaussianBlur#cv2.GaussianBlur"&gt;Gaussianblur&lt;/a&gt; (高斯模糊)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_canny/py_canny.html?highlight=canny"&gt;Canny&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.opencv.org/3.0-beta/modules/imgproc/doc/filtering.html?highlight=dilate#cv2.dilate"&gt;dilate&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.opencv.org/3.0-beta/modules/imgproc/doc/filtering.html?highlight=erode#cv2.erode"&gt;erode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="brush: jscript"&gt;
import cv2
import numpy as np

img = cv2.imread("lena.png")
kernel = np.ones((5,5),np.uint8) #return a new array of given shape and type, filled with ones.

imgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) #convert lena.png to gray
imgBlur = cv2.GaussianBlur(imgGray,(7,7),0) #blurs an image using a Gaussian filter
imgCanny = cv2.Canny(img,195,195) #blurs an image using a Canny filter
imgDialation = cv2.dilate(imgCanny,kernel,iterations=1) #dilate Canny filter image
imgEroded = cv2.erode(imgDialation,kernel,iterations=1)

cv2.imshow("Gray Image",imgGray)
cv2.imshow("Blur Image",imgBlur)
cv2.imshow("Canny Image",imgCanny)
cv2.imshow("Dilate Image",imgDialation)
cv2.imshow("Eroded Image",imgEroded)
cv2.waitKey(0)
&lt;/pre&gt;</content><category term="日誌"></category><category term="opencv"></category><category term="numpy"></category><category term="cvtcolor"></category><category term="gaussianblur"></category><category term="canny"></category><category term="dilate"></category><category term="erode"></category></entry><entry><title>Jul 22, 2020 日誌</title><link href=".%5CJul_22_%202020.html" rel="alternate"></link><published>2020-07-22T00:00:00+08:00</published><updated>2020-07-22T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-22:.\Jul_22_ 2020.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;</content><category term="日誌"></category></entry><entry><title>Jul 21, 2020 日誌</title><link href=".%5CJul_21_%202020.html" rel="alternate"></link><published>2020-07-21T00:00:00+08:00</published><updated>2020-07-21T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-21:.\Jul_21_ 2020.html</id><summary type="html">&lt;h1&gt;練習建立 Ubuntu 20.04 server&lt;/h1&gt;
</summary><content type="html">&lt;h1&gt;練習建立 Ubuntu 20.04 server&lt;/h1&gt;


&lt;h2&gt;查詢 IP 位址（已安裝 net-tools）&lt;/h2&gt;
&lt;pre class="brush: jscript"&gt;
ifconfig 
&lt;/pre&gt;

&lt;h3&gt;netplan 設定 （only IPv6） :&lt;/h3&gt;
&lt;p&gt;重新命名 00-installer-config.yaml 成 net.yaml，為了之後修改網路設定時方便輸入。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
cd /etc/netplan
sudo mv *.yaml net.yaml
&lt;/pre&gt;

&lt;p&gt;修改網路設定檔&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo vi net.yaml
&lt;/pre&gt;

&lt;p&gt;將網路設定成純 IPv6 環境，IPv6 網路位址是 16 進制，所以只能使用0~9和 a~f 可以使用，在設定位址時需要注意一下。&lt;/p&gt;
&lt;p&gt;設定檔內容（net.yaml）:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
# This is the network config written by 'subiquity'
network:
  ethernets:
    enp0s25:
      addresses:
              - 2001:288:6004:17:02:cad::3150/64
      gateway6: 2001:288:6004:17::254
      nameservers:
              addresses:
                      - 2001:b000:168::1
  version: 2
&lt;/pre&gt;

&lt;pre class="brush: jscript"&gt;
sudo netplan apply
&lt;/pre&gt;

&lt;h3&gt;proxy 設定（only IPv6） :&lt;/h3&gt;
&lt;p&gt;在純 IPv6 環境下無法 clone github 倉儲，所以需要設定代理主機（porxy）。&lt;/p&gt;
&lt;p&gt;到 /etc/apt/apt.conf.d 目錄下修改 proxy 設定。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
cd /etc/apt/apt.conf.d
sudo vi proxy.conf
&lt;/pre&gt;

&lt;p&gt;proxy 設定檔內容（proxy.conf）：&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
Acquire::http::proxy "http://[2001:288:6004:17::69]:3128";
&lt;/pre&gt;

&lt;p&gt;修改後，更新 apt 設定。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo apt update
&lt;/pre&gt;

&lt;hr&gt;
&lt;h2&gt;導入所需模組&lt;/h2&gt;
&lt;p&gt;安裝 python3 的 pip 模組&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo apt install python3-pip
&lt;/pre&gt;

&lt;p&gt;安裝 cmsimde 所需要的模組（flask、flask_cors、bs4、lxml）&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo pip3 install flask flask_cors bs4 lxml
&lt;/pre&gt;

&lt;p&gt;安裝 uwsgi 和 python plugin&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo apt install uwsgi uwsgi-plugin-python3
&lt;/pre&gt;

&lt;p&gt;安裝 nginx&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo apt install nginx
&lt;/pre&gt;

&lt;hr&gt;
&lt;h2&gt;建立 key and crt&lt;/h2&gt;
&lt;p&gt;練習時建立自己認證的 key 和 crt 。如果實際要架設 server 就需要第三方任成的 key。
key 和 crt 放在 /home/kmol2020 目錄下&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt
&lt;/pre&gt;

&lt;hr&gt;
&lt;h2&gt;設定 nginx&lt;/h2&gt;
&lt;h3&gt;導入 CMSIMDE 模組&lt;/h3&gt;
&lt;p&gt;在 git clone 前先設定 git 會用到的 proxy設定 &lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
git config --global http.proxy http://[2001:288:6004:17::69]:3128
&lt;/pre&gt;

&lt;p&gt;為了練習架設網站，所以新建一個 3150_site 目錄在 /home/kmol2020 目錄下，專門來放 cmsimde 的資料。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
mkdir 3150_site
cd 3150_site
git clone https://github.com/mdecourse/cmsimde.git
&lt;/pre&gt;

&lt;p&gt;將 up_dir 目錄下的資料複製一份到 3150_site目錄，為了讓之後啟動網站時讀取資料的配置。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
cp -r /home/kmol2020/3150_site/cmsimde/up_dir/* /home/kmol2020/3150_site
&lt;/pre&gt;

&lt;h3&gt;設定 nginx&lt;/h3&gt;
&lt;p&gt;將 /etc/nginx/nginx.conf 裡面的讀取目錄 sites-enabled 替換成 sites-available （第62行）。* 則是讀取到 default ，因為 sites-available 目錄下只有 default 這個檔案。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
cd /etc/nginx
sudo vi nginx.conf
&lt;/pre&gt;

&lt;pre class="brush: jscript"&gt;
include /etc/nginx/sites-available/*
&lt;/pre&gt;

&lt;p&gt;修改 sites-available 裡的設定，將 root 的讀取目錄換到 /home/kmol2020/3150_site 。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
cd /etc/nginx/sites-available
sudo vi default
&lt;/pre&gt;

&lt;pre class="brush: jscript"&gt;
#root /var/www/html
root /home/kmol2020/3150_site;
&lt;/pre&gt;

&lt;p&gt;重啟 nginx&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo /etc/init.d/nginx restart
&lt;/pre&gt;

&lt;p&gt;導入動態網站&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo vi /etc/nginx/sites-available/default
&lt;/pre&gt;

&lt;p&gt;加入 port 9443的設定，設定內如下：&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
server {

listen 9443 ssl;
listen [::]:9443 ssl;

# 指定 static 所在位置
location /static {
alias /home/kmol2020/3150_site/cmsimde/static/;
}

location / {
# 導入 uwsgi_params 設定參數
include uwsgi_params;
# 根目錄設為近端的 8080 port 
uwsgi_pass  127.0.0.1:8080;
}

ssl_certificate /home/kmol2020/localhost.crt;
ssl_certificate_key /home/kmol2020/localhost.key;
#ssl_certificate /etc/letsencrypt/live/test.kmol.info/fullchain.pem;
#ssl_certificate_key /etc/letsencrypt/live/test.kmol.info/privkey.pem;
ssl_session_timeout 5m;
ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
ssl_prefer_server_ciphers on;
try_files $uri $uri/ =404;
}
&lt;/pre&gt;

&lt;p&gt;在 nginx 設定中， 導入 uwsgi_params，其網頁根目錄的資料可以由 uwsgi 網站程式提供。&lt;/p&gt;
&lt;p&gt;因為 uwsgi 無 SSL 設置， 因此當內部動態網站以 localhost:8080 將資料送交 Nginx （9443） 之後，可以由 Nginx 提供聯外的 SSL 服務。&lt;/p&gt;
&lt;p&gt;開啟 uwsgi 功能&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
cd /home/kmol2020/3150_site
sudo vi init.py
&lt;/pre&gt;

&lt;p&gt;確認 CMSiMDE 中 init.py 設定 uwsgi = True, 表示動態網站系統要以 uwsgi 模式啟動&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
uwsgi = True
&lt;/pre&gt;

&lt;p&gt;設定 uwsgi.ini&lt;/p&gt;
&lt;p&gt;在 /home/kmol2020 新建 uwsgi_ini 目錄，專門存放 uwsgi 的設定。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
mkdir uwsgi_ini
&lt;/pre&gt;

&lt;pre class="brush: jscript"&gt;
sudo vi uwsgi.ini
&lt;/pre&gt;

&lt;p&gt;uwsgi.ini 的設定內容如下：&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
[uwsgi]
socket = :8080
uid = kmol2020
gid = kmol2020
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
process = 4
threads = 2
chdir = /home/kmol2020/3150_site/cmsimde
wsgi-file = /home/kmol2020/3150_site/cmsimde/wsgi.py
&lt;/pre&gt;

&lt;p&gt;重啟 nginx&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo /etc/init.d/nginx restart
&lt;/pre&gt;

&lt;p&gt;若出現錯誤，有可能是 /etc/nginx/sites-available/default 內容有誤。訂正完重啟就可以了。&lt;/p&gt;
&lt;p&gt;重新啟動 Nginx 並利用 uwsgi 指令測試
手動啟動 uwsgi 主機的指令︰&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
/usr/bin/uwsgi --emperor /home/kmol2020/uwsgi_ini
&lt;/pre&gt;

&lt;p&gt;此時可以測試是否順利連上 &lt;a href="http://[2001:288:6004:17:2:cad:0:3150]:80"&gt;http://[2001:288:6004:17:2:cad:0:3150]:80&lt;/a&gt;和 &lt;a href="https://[2001:288:6004:17:2:cad:0:3150]:9443"&gt;http://[2001:288:6004:17:2:cad:0:3150]:9443&lt;/a&gt;，若沒問題再設定防火牆。&lt;/p&gt;
&lt;h2&gt;防火牆設定 （ufw）&lt;/h2&gt;
&lt;p&gt;以 root 身分進行 ufw 設定，將22 80 9443 一起設定。設定完後可以使用 ufw status 查看防火牆設定。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo -s
ufw status
ufw allow from 2001:288:6004:17::/32 to any port 22
ufw deny 22
ufw allow from 2001:288:6004:17::/32 to any port 80
ufw deny 80
ufw allow from 2001:288:6004:17::/32 to any port 9443
ufw deny 9443
ufw enable
&lt;/pre&gt;

&lt;p&gt;若要退出 root 模式： exit&lt;/p&gt;
&lt;p&gt;假如網路不在系上網段, 則需要設定 140.130.17.4:3128 作為代理主機才能連線.&lt;/p&gt;
&lt;p&gt;因為 ufw 設定都必須在 sudo 權限下, 因此使用 sudo -s 直接以 root 身份執行後續的指令. 初學者在練習 ufw 時可以在虛擬主機中設定, 避免在遠端連線時, 因設定錯誤而無法 ssh 至主機.&lt;/p&gt;
&lt;h3&gt;設定 uwsgi service&lt;/h3&gt;
&lt;p&gt;以管理者身分在 /etc/systemd/system 目錄中建立 cmsimde.service 檔案, 內容如下:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
[Unit]
Description=uWSGI to serve CMSiMDE 
After=network.target

[Service]
User=kmol2020
Group=kmol2020
WorkingDirectory=/home/kmol2020/uwsgi_ini
ExecStart=/usr/bin/uwsgi --emperor /home/kmol2020/uwsgi_ini

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;

&lt;p&gt;接著將 cmsimde 服務設為隨系統開機啟動&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo systemctl enable cmsimde
&lt;/pre&gt;

&lt;p&gt;若要取消 cmsimde 服務隨系統開機啟動&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo systemctl disable cmsimde
&lt;/pre&gt;

&lt;p&gt;手動啟動 cmsimde.service 服務&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo systemctl start cmsimde
&lt;/pre&gt;

&lt;p&gt;手動停止 cmsimde.service 服務&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo systemctl stop cmsimde
&lt;/pre&gt;</content><category term="日誌"></category><category term="module"></category><category term="server"></category><category term="netplan"></category><category term="nginx"></category><category term="uwsgi"></category><category term="key"></category><category term="crt"></category><category term="pip"></category><category term="mv"></category><category term="IPv6"></category><category term="開機啟動"></category></entry><entry><title>Jul 20, 2020 日誌</title><link href=".%5CJul_20_%202020.html" rel="alternate"></link><published>2020-07-20T00:00:00+08:00</published><updated>2020-07-20T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-20:.\Jul_20_ 2020.html</id><summary type="html">&lt;p&gt;練習建立server。修改網路設定，設定跟隨開機啟動。
</summary><content type="html">&lt;p&gt;練習建立server。修改網路設定，設定跟隨開機啟動。
&lt;/p&gt;
&lt;p&gt;將網路設定，設定成純 IPv6 設定。&lt;/p&gt;
&lt;p&gt;IPv6 網路位址是 16 進制，所以只能使用0~9和 a~f 可以使用。&lt;/p&gt;
&lt;p&gt;可將網路設定檔更名，以便之後設定時修改。
&lt;pre class="brush: jscript"&gt;
sudo mv *.yaml net.yaml
&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;設定 uwsgi service&lt;/h2&gt;
&lt;p&gt;以管理者身分在 /etc/systemd/system 目錄中建立 cmsimde.service 檔案, 內容如下:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
[Unit]
Description=uWSGI to serve CMSiMDE 
After=network.target

[Service]
User=kmol2020
Group=kmol2020
WorkingDirectory=/home/kmol2020/uwsgi_ini
ExecStart=/usr/bin/uwsgi --emperor /home/kmol2020/uwsgi_ini

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;

&lt;p&gt;接著將 cmsimde 服務設為隨系統開機啟動:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo systemctl enable cmsimde
&lt;/pre&gt;

&lt;p&gt;若要取消 cmsimde 服務隨系統開機啟動：&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo systemctl disable cmsimde
&lt;/pre&gt;

&lt;p&gt;手動啟動 cmsimde.service 服務&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo systemctl start cmsimde
&lt;/pre&gt;

&lt;p&gt;手動停止 cmsimde.service 服務&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo systemctl stop cmsimde
&lt;/pre&gt;</content><category term="日誌"></category><category term="mv"></category><category term="IPv6"></category><category term="開機啟動"></category></entry><entry><title>Jul 19, 2020 日誌</title><link href=".%5CJul_19_%202020.html" rel="alternate"></link><published>2020-07-19T00:00:00+08:00</published><updated>2020-07-19T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-19:.\Jul_19_ 2020.html</id><summary type="html">&lt;p&gt;整理Jul,15~18的blog。
</summary><content type="html">&lt;p&gt;整理Jul,15~18的blog。

今天在整理15~18日誌，還有整理房間。&lt;/p&gt;</content><category term="日誌"></category></entry><entry><title>Jul 18, 2020 日誌</title><link href=".%5CJul_18_%202020.html" rel="alternate"></link><published>2020-07-18T00:00:00+08:00</published><updated>2020-07-18T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-18:.\Jul_18_ 2020.html</id><summary type="html">&lt;p&gt;練習建立server。
</summary><content type="html">&lt;p&gt;練習建立server。
&lt;/p&gt;
&lt;h2&gt;設定 ufw&lt;/h2&gt;
&lt;pre class="brush: jscript"&gt;
sudo -s
ufw status
ufw allow from 2001:288:6004:17::/32 to any port 22
ufw deny 22
ufw allow from 2001:288:6004:17::/32 to any port 80
ufw deny 80
ufw enable
&lt;/pre&gt;

&lt;p&gt;假如網路不在系上網段, 則需要設定 140.130.17.4:3128 作為代理主機才能連線.&lt;/p&gt;
&lt;p&gt;因為 ufw 設定都必須在 sudo 權限下, 因此使用 sudo -s 直接以 root 身份執行後續的指令. 初學者在練習 ufw 時可以在虛擬主機中設定, 避免在遠端連線時, 因設定錯誤而無法 ssh 至主機.&lt;/p&gt;
&lt;p&gt;退出root身分：exit&lt;/p&gt;
&lt;p&gt;先暫時關閉防火牆&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
ufw disable
&lt;/pre&gt;

&lt;p&gt;允許設計系 IP v6 網段連線 9443 port&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
ufw allow from 2001:288:6004:17::/32 to any port 9443
&lt;/pre&gt;

&lt;p&gt;其他網段主機一律]不准連線&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
ufw deny 9443
&lt;/pre&gt;

&lt;p&gt;重新開啟 ufw 防火牆&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
ufw enable
&lt;/pre&gt;

&lt;p&gt;做到步驟，不確定如何測試是否可以成功連線。&lt;/p&gt;</content><category term="日誌"></category><category term="nginx"></category><category term="uwsgi"></category><category term="pip"></category></entry><entry><title>Jul 17, 2020 日誌</title><link href=".%5CJul_17_%202020.html" rel="alternate"></link><published>2020-07-17T00:00:00+08:00</published><updated>2020-07-17T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-17:.\Jul_17_ 2020.html</id><summary type="html">&lt;p&gt;練習建立server。
</summary><content type="html">&lt;p&gt;練習建立server。
&lt;/p&gt;
&lt;h2&gt;Ubuntu 20.04 server&lt;/h2&gt;
&lt;h3&gt;安裝會使用到的模組&lt;/h3&gt;
&lt;p&gt;安裝 pip 模組&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo apt install python3-pip
&lt;/pre&gt;

&lt;p&gt;安裝 cmsimde 所需的模組&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo pip3 install flask flask_cors bs4 lxml
&lt;/pre&gt;

&lt;p&gt;安裝 uwsgi 、 python plugin&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo apt install uwsgi uwsgi-plugin-python3 
&lt;/pre&gt;

&lt;p&gt;安裝 python 模組 uwsgi、nginx&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo apt install uwsgi
sudo apt install nginx
&lt;/pre&gt;

&lt;hr&gt;
&lt;h3&gt;建立 key 和 crt&lt;/h3&gt;
&lt;p&gt;在 /home/kmol2020 目錄下執行&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt
&lt;/pre&gt;

&lt;hr&gt;
&lt;h3&gt;設定 nginx&lt;/h3&gt;
&lt;pre class="brush: jscript"&gt;
cd /etc/nginx
sudo vi nginx.conf
&lt;/pre&gt;

&lt;p&gt;將 nginx.conf 第62行︰
sites-enabled/&lt;em&gt; 換成 sites-available/&lt;/em&gt;
&lt;pre class="brush: jscript"&gt;
sites-available/*
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;導入 cmsimde &lt;/p&gt;
&lt;p&gt;在 /home/kmol2020 目錄下新增一個 test_site 目錄，，將 cmsimde clone 下來。&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
mkdir test_site
cd test_site
git clone https://github.com/mdecourse/cmsimde.git
&lt;/pre&gt;

&lt;p&gt;將 up_dir 目錄裡面的資料複製到 test_site 目錄下&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
cp -r /home/kmol2020/test_site/cmsimde/up_dir/* /home/kmol2020/test_site
&lt;/pre&gt;

&lt;p&gt;更改 root 預設讀取目錄&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
cd /etc/nginx/sites-available
sudo vi default
&lt;/pre&gt;

&lt;pre class="brush: jscript"&gt;
#root /var/www/html
root /home/kmol2020/test_site
&lt;/pre&gt;

&lt;p&gt;重啟 nginx&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo /etc/init.d/nginx restart
&lt;/pre&gt;

&lt;p&gt;導入 uwsgi 動態網站&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo vi /etc/nginx/sites-available/default
&lt;/pre&gt;

&lt;p&gt;將 nginx 設定檔導入 uwsgi_params。其網頁根目錄的資料可以由 uwsgi 網站程式提供&lt;/p&gt;
&lt;p&gt;因為 uwsgi 無 SSL 設置, 因此當內部動態網站以 localhost:8080 將資料送交 Nginx 之後, 可以由 Nginx 提供聯外的 SSL 服務.&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
server {

listen 9443 ssl;
listen [::]:9443 ssl;

# 指定 static 所在位置
location /static {
alias /home/kmol2020/test_site/cmsimde/static/;
}

location / {
# 導入 uwsgi_params 設定參數
include uwsgi_params;
# 根目錄設為近端的 8080 port 
uwsgi_pass  127.0.0.1:8080;
}

ssl_certificate /home/kmol2020/localhost.crt;
ssl_certificate_key /home/kmol2020/localhost.key;
#ssl_certificate /etc/letsencrypt/live/test.kmol.info/fullchain.pem;
#ssl_certificate_key /etc/letsencrypt/live/test.kmol.info/privkey.pem;
ssl_session_timeout 5m;
ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
ssl_prefer_server_ciphers on;
try_files $uri $uri/ =404;
}
&lt;/pre&gt;

&lt;p&gt;開啟 ini.py 的 uwsgi 功能&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
cd /home/kmol2020/test_site
sudo vi init.py
&lt;/pre&gt;

&lt;pre class="brush: jscript"&gt;
uwsgi = True
&lt;/pre&gt;

&lt;p&gt;確認 CMSiMDE 中 init.py 設定 uwsgi = True, 表示動態網站系統要以 uwsgi 模式啟動&lt;/p&gt;
&lt;p&gt;設定 uwsgi.ini&lt;/p&gt;
&lt;p&gt;在 /home/kmol2020 目錄下新建 uwsgi_ini 的子目錄&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
mkdir uwsgi_ini
&lt;/pre&gt;

&lt;pre class="brush: jscript"&gt;
sudo vi uwsgi.ini
&lt;/pre&gt;

&lt;pre class="brush: jscript"&gt;
[uwsgi]
socket = :8080
uid = kmol2020
gid = kmol2020
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
process = 4
threads = 2
chdir = /home/kmol2020/test_site/cmsimde
wsgi-file = /home/kmol2020/test_site/cmsimde/wsgi.py
&lt;/pre&gt;

&lt;p&gt;重啟 nginx&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo /etc/init.d/nginx restart
&lt;/pre&gt;

&lt;p&gt;若出現錯誤，有可能是 /etc/nginx/sites-available/default 內容有打錯。修改完再重啟一次就可以了。&lt;/p&gt;
&lt;p&gt;重新啟動 Nginx 並利用 uwsgi 指令測試
手動啟動 uwsgi 主機的指令︰&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
/usr/bin/uwsgi --emperor /home/kmol2020/uwsgi_ini
&lt;/pre&gt;</content><category term="日誌"></category><category term="nginx"></category><category term="uwsgi"></category><category term="key"></category><category term="crt"></category><category term="pip"></category></entry><entry><title>Jul 16, 2020 日誌</title><link href=".%5CJul_16_%202020.html" rel="alternate"></link><published>2020-07-16T00:00:00+08:00</published><updated>2020-07-16T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-16:.\Jul_16_ 2020.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;</content><category term="日誌"></category></entry><entry><title>Jul 15, 2020 日誌</title><link href=".%5CJul_15_%202020.html" rel="alternate"></link><published>2020-07-15T00:00:00+08:00</published><updated>2020-07-15T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-15:.\Jul_15_ 2020.html</id><summary type="html">&lt;p&gt;調整背英文單字的模式。
</summary><content type="html">&lt;p&gt;調整背英文單字的模式。
&lt;/p&gt;</content><category term="日誌"></category></entry><entry><title>Jul 14, 2020 日誌</title><link href=".%5CJul_14_%202020.html" rel="alternate"></link><published>2020-07-14T00:00:00+08:00</published><updated>2020-07-14T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-14:.\Jul_14_ 2020.html</id><summary type="html">&lt;p&gt;整理Jul,10~12的日誌。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;整理Jul,10~12的日誌。&lt;/p&gt;


&lt;p&gt;&lt;a href="https://cs.stanford.edu/people/karpathy/convnetjs/demo/mnist.html"&gt;手寫數字影像辨識&lt;/a&gt;&lt;/p&gt;</content><category term="日誌"></category><category term="影像辨識"></category></entry><entry><title>Jul 13, 2020 日誌</title><link href=".%5CJul_13_%202020.html" rel="alternate"></link><published>2020-07-13T00:00:00+08:00</published><updated>2020-07-13T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-13:.\Jul_13_ 2020.html</id><summary type="html">&lt;p&gt;整理大間實驗室，整理和更新電腦。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;整理大間實驗室，整理和更新電腦。&lt;/p&gt;


&lt;p&gt;大間實驗室的東西要撤走，之後給五專生的科學會的空間，在整理得時候發現有很多以前留下來的書和設備，有將一些原文書和工具書。&lt;/p&gt;
&lt;p&gt;下午將之後練習Keras和Pytouch用的電腦升級 Windows10 的版本。&lt;/p&gt;</content><category term="日誌"></category></entry><entry><title>Jul 12, 2020 日誌</title><link href=".%5CJul_12_%202020.html" rel="alternate"></link><published>2020-07-12T00:00:00+08:00</published><updated>2020-07-12T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-12:.\Jul_12_ 2020.html</id><summary type="html">&lt;p&gt;帶樂高營，第二天。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;帶樂高營，第二天。&lt;/p&gt;


&lt;p&gt;小隊員與對輔比較熟悉，在互動上就比較有回應。在教程式時他們雖然沒什麼反應，但在測試時他們是了解程式運的步驟。在比賽時看到其他小隊較不適當的方式時，他們還是會堅持自己的原則：不會用投機的方式贏得比賽，比完賽後會參考前幾場的經驗去改進，小隊員之間會相互分享討論經驗。&lt;/p&gt;
&lt;p&gt;這兩天下來，發現有小朋友會特別在意某些點，即使本意是好的，但會因為不善於溝通會造成小衝突。溝通是團隊合作不可或缺的關鍵。&lt;/p&gt;</content><category term="日誌"></category><category term="樂高營"></category></entry><entry><title>Jul 11, 2020 日誌</title><link href=".%5CJul_11_%202020.html" rel="alternate"></link><published>2020-07-11T00:00:00+08:00</published><updated>2020-07-11T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-11:.\Jul_11_ 2020.html</id><summary type="html">&lt;p&gt;帶樂高營，第一天。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;帶樂高營，第一天。&lt;/p&gt;


&lt;p&gt;剛開始和小隊員互動他們可能因為不熟又比較內向，所以在互動上必較沒有回應，但他們有進入狀況：在教他們小隊呼的時候會跟著做：在合作的方面表現很好，會一起組裝，沒有吵架的情形。在小隊比賽時，即使小隊員失誤而沒贏得比賽也不會一味的指責，反而會互相相交流進步。&lt;/p&gt;
&lt;p&gt;一整天下來，整個小隊員的表現都很好。特殊生的部分：其實比較需要去留意他們的情形，像亞斯伯格就講話比較直接，有時候就會因此而造成小隊員之間的衝突，需要協調、安慰小隊員，這時溝通技巧就很重要。照顧故特殊生需要比較多的耐心和技巧。&lt;/p&gt;</content><category term="日誌"></category><category term="樂高營"></category></entry><entry><title>Jul 10, 2020 日誌</title><link href=".%5CJul_10_%202020.html" rel="alternate"></link><published>2020-07-10T00:00:00+08:00</published><updated>2020-07-10T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-10:.\Jul_10_ 2020.html</id><summary type="html">&lt;p&gt;整理 Jul,7~8 的資料。Ubuntu 20.04、動態網站（nginx、uwsgi）、數位簽章、Ubuntu防火牆（ufw）
</summary><content type="html">&lt;p&gt;整理 Jul,7~8 的資料。Ubuntu 20.04、動態網站（nginx、uwsgi）、數位簽章、Ubuntu防火牆（ufw）
&lt;/p&gt;
&lt;h2&gt;Ubuntu 20.04&lt;/h2&gt;
&lt;h2&gt;動態網站（nginx、uwsgi）&lt;/h2&gt;
&lt;p&gt;因為 CMSiMDE 的動態網站需要 flask、flask_cors、bs4 與 lxml 等模組，所以要先確定 Ubuntu 20.04 中的 Python3 已經安裝這些模組：&lt;/p&gt;
&lt;p&gt;sudo pip3 install flask flask_cors bs4 lxml&lt;/p&gt;
&lt;p&gt;uwsgi 所需模組：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝 uwsgi 套件與 Python3 plugin&lt;/p&gt;
&lt;p&gt;sudo apt install uwsgi uwsgi-plugin-python3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝 Python 模組 uwsgi&lt;/p&gt;
&lt;p&gt;sudo pip3 install uwsgi&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建立 crt 與 key，並修改 Nginx sites-available/default，加入執行 uwsgi 動態網站的設定（/etc/nginx/sites-available/default 附加 server 設定 ）：&lt;/p&gt;
&lt;p&gt;建立 localhost.key 與 localhost.crt：&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
    sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt
&lt;/pre&gt;

&lt;pre class="brush: jscript"&gt;
server {

    listen 9443 ssl;
    listen [::]:9443 ssl;

    # 指定 static 所在位置
    location /static {
    alias /home/yen/cad1_site/cmsimde/static/;
    }

    location / {
    # 導入 uwsgi_params 設定參數
    include uwsgi_params;
    # 根目錄設為近端的 8080 port 
    uwsgi_pass  127.0.0.1:8080;
    }

    ssl_certificate /home/yen/localhost.crt;
    ssl_certificate_key /home/yen/localhost.key;
    #ssl_certificate /etc/letsencrypt/live/cad1.kmol.info/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/cad1.kmol.info/privkey.pem;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}
&lt;/pre&gt;

&lt;p&gt;上述設定的基本概念為：Nginx 設定檔案中, 只要導入 uwsgi_params，其網頁根目錄的資料可以由 uwsgi 網站程式提供。&lt;/p&gt;
&lt;p&gt;因為 uwsgi 無 SSL 設置，因此當內部動態網站以 localhost:8080 將資料送交 Nginx 之後, 可以由 Nginx 提供聯外的 SSL 服務。&lt;/p&gt;
&lt;p&gt;uwsgi 主機設定&lt;/p&gt;
&lt;p&gt;首先確認 CMSiMDE 中 init.py 設定 uwsgi = True，表示動態網站系統要以 uwsgi 模式啟動&lt;/p&gt;
&lt;p&gt;接著將利用 uwsgi 啟動模式中的 emperor 選項，每一台主機只要提供一個 .ini 設定檔案，並集中放在某一目錄中，只要在啟動 uwsgi 時，指定該存放 .ini 設定檔案的目錄位置，uwsgi emperor 模式會一一讀取，配合啟動各 uwsgi server。&lt;/p&gt;
&lt;p&gt;目前將此一設定目錄放在 /home/yen/enabled, 而設定檔案 uwsgi.ini 則放入 uwsgi_ini 目錄中。&lt;/p&gt;
&lt;p&gt;uwsgi.ini 配合設為：&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
[uwsgi]
socket = :8080
uid = yen
gid = yen
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
process = 4
threads = 2
chdir = /home/yen/cad1_site/cmsimde
wsgi-file = /home/yen/cad1_site/cmsimde/wsgi.py
&lt;/pre&gt;

&lt;p&gt;表示要使用 8080 傳輸資料 （必須與 Nginx /etc/nginx/sites-available/default 中的設，定對應）並指定 wsgi.py 所在目錄。&lt;/p&gt;
&lt;p&gt;重新啟動 Nginx 並利用 uwsgi 指令測試
手動啟動 uwsgi 主機的指令：&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
/usr/bin/uwsgi --emperor /home/yen/uwsgi_ini
&lt;/pre&gt;

&lt;p&gt;額外加入 ufw 9443 的防火牆設定
先暫時關閉 ufw
&lt;pre class="brush: jscript"&gt;
ufw disable
&lt;/pre&gt;
允許設計系 IP v6 網段連線 9443 port
&lt;pre class="brush: jscript"&gt;
ufw allow from 2001:288:6004:17::/32 to any port 9443
&lt;/pre&gt;
其他網段主機一律]不准連線
&lt;pre class="brush: jscript"&gt;
ufw deny 9443
&lt;/pre&gt;
重新開啟 ufw 防火牆
&lt;pre class="brush: jscript"&gt;
ufw enable
&lt;/pre&gt;
若 https://cad1.kmol.info:9443 已經可以接受連線, 接下來最後一個步驟必須設定以系統 service 隨機啟動 uwsgi&lt;/p&gt;
&lt;p&gt;設定 uwsgi service
以管理者身分在 /etc/systemd/system 目錄中建立 cmsimde.service 檔案, 內容如下:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
[Unit]
Description=uWSGI to serve CMSiMDE 
After=network.target

[Service]
User=yen
Group=yen
WorkingDirectory=/home/yen/uwsgi_ini
ExecStart=/usr/bin/uwsgi --emperor /home/yen/uwsgi_ini

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;

&lt;p&gt;接著將 cmsimde 服務設為隨系統開機啟動:
&lt;pre class="brush: jscript"&gt;
sudo systemctl enable cmsimde
&lt;/pre&gt;
若要取消 cmsimde 服務隨系統開機啟動:
&lt;pre class="brush: jscript"&gt;
sudo systemctl disable cmsimde
&lt;/pre&gt;
手動啟動 cmsimde.service 服務
&lt;pre class="brush: jscript"&gt;
sudo systemctl start cmsimde
&lt;/pre&gt;
手動停止 cmsimde.service 服務
&lt;pre class="brush: jscript"&gt;
sudo systemctl stop cmsimde
&lt;/pre&gt;
上面完整的步驟也寫在 mdecourse/project2020-1#4&lt;/p&gt;
&lt;p&gt;完成後, 只允許系上 IPv6 網段可以直接連到 https://cad1.kmol.info:9443 以 4072kmol 登入管理後改版, 直接 generate pages 就可以在 http://cad1.kmol.info 看到.&lt;/p&gt;
&lt;h2&gt;數位簽章&lt;/h2&gt;
&lt;p&gt;https://letsencrypt.org/&lt;/p&gt;
&lt;p&gt;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx 
&lt;pre class="brush: jscript"&gt;
sudo apt-get update
sudo apt-get install software-properties-common
sudo add-apt-repository universe
sudo apt-get update
sudo apt-get install certbot python3-certbot-nginx
sudo certbot certonly --nginx
sudo certbot renew --dry-run
&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;Ubuntu防火牆（ufw）&lt;/h2&gt;
&lt;pre class="brush: jscript"&gt;
ufw 是 Ubuntu 內建的防火牆, 與 KMOLab 有關的設定：
sudo -s
ufw status
ufw allow from 2001:288:6004:17::/32 to any port 22
ufw deny 22
ufw allow from 2001:288:6004:17::/32 to any port 80
ufw deny 80
ufw enable
&lt;/pre&gt;

&lt;p&gt;sudo -s 是直接輸入具管理者身份的密碼後，就可以採 root 身份執行後續的指令，退出 root，輸入 exit&lt;/p&gt;
&lt;p&gt;ufw status 是列出目前防火牆狀態，確認為 inactive 後再進行後續的 rules 設定。&lt;/p&gt;
&lt;p&gt;ufw allow from 2001:288:6004:17::/32 to any port 22&lt;/p&gt;
&lt;p&gt;表示允許從 2001:288:6004:17::/32 來的連線可以使用 port 22，也就是可以使用 ssh 對主機連線。&lt;/p&gt;
&lt;p&gt;2001:288:6004:17::/32 中之 32，表示前面 IPv6 網址，只要前面四個區為 2001:288:6004:17 即符合條件，因為每一區 8 個 bit，因此才以 /32 表示涵蓋的範圍。&lt;/p&gt;
&lt;p&gt;先設定允許對 port 22 連線的區段後，隨即以 ufw deny 22 封鎖其他非 allow 的所有網段，目的在於只允許系上 IPv6 網段可以 ssh 到主機。&lt;/p&gt;
&lt;p&gt;隨後也是只允許系上網段可以連線到 port 80，也就是 www 內建的 port。&lt;/p&gt;</content><category term="日誌"></category><category term="Ubuntu"></category><category term="20.04"></category><category term="nginx"></category><category term="uwsgi"></category><category term="數位簽章"></category><category term="Ubuntu防火牆"></category><category term="ufw"></category></entry><entry><title>Jul 9, 2020 日誌</title><link href=".%5CJul_09_%202020.html" rel="alternate"></link><published>2020-07-09T00:00:00+08:00</published><updated>2020-07-09T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-09:.\Jul_09_ 2020.html</id><summary type="html">&lt;p&gt;列印風扇支架。嘗試將按add_to_mblogger 之後會新增 blog_id 子節點為post_id。
</summary><content type="html">&lt;p&gt;列印風扇支架。嘗試將按add_to_mblogger 之後會新增 blog_id 子節點為post_id。

因為最大台3D印表機的擠料頭的散熱風扇掉落，需要固定，因此利用Onshape 畫風扇支架。&lt;/p&gt;
&lt;p&gt;一開始的模型，風扇上面與擠料頭固定的地方寬度太寬基線開關會壓不到，之後寬度改窄。風扇的卡槽寬度需要改大，因為裝上的時候太緊。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/Fan_support_v1.png" width="450"&gt;&lt;/p&gt;
&lt;p&gt;第一次改版&lt;/p&gt;
&lt;p&gt;改完後發現，會和擠出頭的固定螺絲卡到，因此在那挖個槽，消除干涉。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/Fan_support_v2.png" width="450"&gt;&lt;/p&gt;
&lt;p&gt;修改完組裝後&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/Fan_support-1.jpg" width="450"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/Fan_support-2.jpg" width="450"&gt;&lt;/p&gt;</content><category term="日誌"></category><category term="Onshape"></category><category term="風扇支架"></category></entry><entry><title>Jul 8, 2020 日誌</title><link href=".%5CJul_08_%202020.html" rel="alternate"></link><published>2020-07-08T00:00:00+08:00</published><updated>2020-07-08T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-08:.\Jul_08_ 2020.html</id><summary type="html">&lt;p&gt;看nginx、uwsgi、ufw設定。
</summary><content type="html">&lt;p&gt;看nginx、uwsgi、ufw設定。
&lt;/p&gt;
&lt;p&gt;nginx：非同步框架的網頁伺服器。（內建支援uwsgi）&lt;/p&gt;
&lt;p&gt;uwsgi：讓多個執行序常駐啟動，有任務進來時丟給這些執行序處理，處理完之後回傳&lt;/p&gt;
&lt;p&gt;ufw︰Ubuntu 的防火牆。&lt;/p&gt;
&lt;p&gt;資料大致上看過，還沒整理，剩&lt;a href="https://uwsgi-docs.readthedocs.io/en/latest/"&gt;uwsgi&lt;/a&gt;、&lt;a href="https://linuxconfig.org/ubuntu-20-04-guide"&gt;ubuntu 20.04 guide&lt;/a&gt;還沒看。&lt;/p&gt;
&lt;p&gt;下午樂高營開會。&lt;/p&gt;
&lt;p&gt;Jul,1 修的3D印表機搬位置後噴頭移動沒反應。暫時先布維修。&lt;/p&gt;
&lt;p&gt;晚上有用最大台的3D印表機印東西，之後因為平面偏移、斷料、風扇掉落停止列印。&lt;/p&gt;</content><category term="日誌"></category></entry><entry><title>Jul 7, 2020 日誌</title><link href=".%5CJul_07_%202020.html" rel="alternate"></link><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-07:.\Jul_07_ 2020.html</id><summary type="html">&lt;p&gt;今天在做皮件。還有稍微看一下老師傳的資料。
</summary><content type="html">&lt;p&gt;今天在做皮件。還有稍微看一下老師傳的資料。
&lt;/p&gt;
&lt;h2&gt;皮件製作流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打版：
將要做的皮件的展開圖畫好，可以利用較高磅數的紙或是木板來當作裁皮的版型。&lt;/li&gt;
&lt;li&gt;裁皮：
將先前製作好的版型放在皮上，用鐕子或筆畫上裁切的記號、邊線。&lt;/li&gt;
&lt;li&gt;染色、塗保色劑（可有可無）：
染色的染料有分鹽基和酒精性的染劑。染完色可以塗保色劑來讓染好的皮革較不容易退色。&lt;/li&gt;
&lt;li&gt;上床面處理劑：
床面處理劑是塗在毛面（非光滑面，較粗糙那面），讓毛面的纖維比較平整。&lt;/li&gt;
&lt;li&gt;推邊：
讓皮革邊緣不會呈現直角，之後磨邊後會比較好摸。
6.磨邊：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;將邊緣磨光滑，讓皮的纖維不會跑出來影響觸感。
7. 打孔：
用菱斬打縫孔，由於皮的厚度比較厚也比一般的布強度強，用針不容一刺穿皮革，打過縫孔後，皮片手縫會很輕鬆。
8. 縫合：
用蠟線縫合皮片，組合成皮件（像皮包、皮夾等）。手縫都使用雙針縫。
9. 磨邊、上油：
縫合後將邊緣磨平（接縫處），在將它磨光滑。完成後皮革的表面可以上一層保護油、保養油，讓皮革較為柔軟。&lt;/p&gt;
&lt;p&gt;成品&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/%E7%9A%AE%E5%A4%BE-1.jpg" width="450"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/%E7%9A%AE%E5%A4%BE-2.jpg" width="450"&gt;&lt;/p&gt;
&lt;h2&gt;專題資料&lt;/h2&gt;
&lt;p&gt;了解專題的伺服器如何配置。&lt;/p&gt;</content><category term="日誌"></category><category term="皮革"></category></entry><entry><title>Jul 6, 2020 日誌</title><link href=".%5CJul_06_%202020.html" rel="alternate"></link><published>2020-07-06T00:00:00+08:00</published><updated>2020-07-06T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-06:.\Jul_06_ 2020.html</id><summary type="html">&lt;p&gt;利用防寫卡、clonezilla複製磁區，在Ubuntu 20.04新增管理員。
</summary><content type="html">&lt;p&gt;利用防寫卡、clonezilla複製磁區，在Ubuntu 20.04新增管理員。
&lt;/p&gt;
&lt;h2&gt;防寫卡複製&lt;/h2&gt;
&lt;h3&gt;step 0&lt;/h3&gt;
&lt;p&gt;來源端與接收端需要在同一個網路下，中斷與外部連線網路。&lt;/p&gt;
&lt;h3&gt;step 1&lt;/h3&gt;
&lt;p&gt;先開機要複製出去（資料來源）那台的電腦，在防寫卡畫面（選擇磁區畫面）按下"F10"進入防寫卡設定，輸入密碼，在系統管理畫面，選擇左方的網路拷貝，拷貝環境：32位元；網卡類型：11 : Intel 1G ndis。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/%E9%82%84%E5%8E%9F%E5%8D%A1%E8%A8%AD%E5%AE%9A_step1.jpg" width="450"&gt;&lt;/p&gt;
&lt;h3&gt;step2&lt;/h3&gt;
&lt;p&gt;設定好按套用設定，再進行網路拷貝（按網路拷貝按鈕）。選擇"模式1"為拷貝模式，確認接收端開機自動連線是勾選。按網路拷貝按鈕&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/%E9%82%84%E5%8E%9F%E5%8D%A1%E8%A4%87%E8%A3%BD_setp2.jpg" width="450"&gt;&lt;/p&gt;
&lt;h3&gt;step3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;網路拷貝：將整個選擇的磁區內容、設定複製過去。覆蓋。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增量拷貝：將選擇的磁區不同的內容、設定複製過去。覆蓋。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;選擇要複製的選項（視情況選擇網路拷貝或增量拷貝），確定，等待登錄。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/%E9%82%84%E5%8E%9F%E5%8D%A1%E8%A4%87%E8%A3%BD_setp3.jpg" width="450"&gt;&lt;/p&gt;
&lt;h3&gt;step4&lt;/h3&gt;
&lt;p&gt;開啟接收端電腦，進入防寫卡畫面（選擇磁區畫面）按下"F9"進入防寫連線傳輸，輸入密碼。&lt;/p&gt;
&lt;p&gt;傳送端電腦，查看是否與連上接收端電腦連上，連上後清單列表上會顯示，按完成登錄，發送資料。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/%E9%82%84%E5%8E%9F%E5%8D%A1%E8%A4%87%E8%A3%BD_setp4-1.jpg" width="450"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/%E9%82%84%E5%8E%9F%E5%8D%A1%E8%A4%87%E8%A3%BD_setp4-2.jpg" width="450"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/%E9%82%84%E5%8E%9F%E5%8D%A1%E8%A4%87%E8%A3%BD_setp4-3.jpg" width="450"&gt;&lt;/p&gt;
&lt;h3&gt;step5&lt;/h3&gt;
&lt;p&gt;若是要複製第三磁區，選擇複製單一作業統，選第三磁區，勾選C槽，傳輸完成後需要重新啟動接收端電腦，順一次複製後設定。重啟後可順便檢查接上外部網路後是否可以正常連線。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s40723150.github.io/UniversityProject/images/%E9%82%84%E5%8E%9F%E5%8D%A1%E8%A4%87%E8%A3%BD_setp2.jpg" width="450"&gt;&lt;/p&gt;
&lt;h2&gt;clonezilla硬碟複製&lt;/h2&gt;
&lt;p&gt;clonezilla硬碟複製 開機前硬體確認：硬碟與光碟機連接順序。&lt;/p&gt;
&lt;p&gt;1.備份硬碟來源 （a硬碟）
2. 光碟機
3. 存放備份的硬碟（b硬碟）&lt;/p&gt;
&lt;p&gt;P.S. 存放備份的硬碟（b硬碟）需要比 備份硬碟來源 （a硬碟） 的容量大一樣大或更大，比備份來源小會無法複製。&lt;/p&gt;
&lt;p&gt;利用clonezilla來進行複製硬碟，事先須準備一片已經入燒入進去clonezilla的光碟（到網路上下載clonezilla的iso檔燒錄到光碟裡），開機時放入clonezilla光碟片，並進入"開機選單"（進入開機選單的快捷鍵會因為各廠牌的電腦而有所不同，當時測試為aser電腦，在出現電腦商logo時按"F12"就進入開機選單）會些換到用光碟機開機（會去讀取clonezilla光碟的資料）。等待一段時間後會進到clonezilla的畫面，選英文，鍵盤定選預設，接下來選硬碟對硬碟（disk to disk）進行複製，硬碟來源選 a硬碟，接收選 b硬碟，其他設定都是預設選項（包括其他未提到的設定），開始複製硬碟，按Enter，2次y（確認覆蓋開機磁區），複製的時間會因硬碟大小而有所差異（當時複製160GB大約是2分鐘），複製完成後關機。&lt;/p&gt;
&lt;p&gt;P.S. clonezilla 硬碟複製是bit by bit，硬碟分割模式為MBR的硬碟在複製的時候開機磁區也會同時複製，不需特別抹除原來的MBR。若硬碟安裝作業系統時無法覆蓋先前的MBR磁區，就必須用clonezilla複製去覆蓋。&lt;/p&gt;
&lt;p&gt;硬碟分割分 MBR 和 GPT兩種。&lt;/p&gt;
&lt;h2&gt;Ubuntu 20.04&lt;/h2&gt;
&lt;h3&gt;建立管理者&lt;/h3&gt;
&lt;p&gt;&lt;pre class="brush: jscript"&gt;
    sudo adduser 使用者名稱
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;輸入登入者的密碼, 以便使用 sudo 管理者身分執行 adduser&lt;/p&gt;
&lt;p&gt;然後輸入 "使用者名稱" 預設密碼與基本資料後, 準備將 "使用者" 設為管理者&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo usermod -aG sudo s40723150
&lt;/pre&gt;

&lt;p&gt;利用 usermod 指令授予 sudo 權限, 有關 usermod 使用說明, 可以利用 man usermod 取得&lt;/p&gt;
&lt;h3&gt;刪除管理者&lt;/h3&gt;
&lt;p&gt;可以刪除 "使用者" 帳號與其 /home/wcm1 對應用戶目錄。&lt;/p&gt;
&lt;p&gt;sudo deluser --remove-home 使用者名稱&lt;/p&gt;
&lt;h3&gt;修改主機名稱&lt;/h3&gt;
&lt;p&gt;牽涉兩個檔案 /etc/hosts 與 /etc/hostname, 修改後必須重新開機&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo vi /etc/hosts 
&lt;/pre&gt;

&lt;p&gt;將 wcm1 改為 cad1 或 cad2 或其他主機對應名稱&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo vi /etc/hostname 
&lt;/pre&gt;

&lt;p&gt;也是將 wcm1 改為 主機對應名稱&lt;/p&gt;
&lt;h3&gt;修改網路設定&lt;/h3&gt;
&lt;p&gt;到/etc/netplan/net.yaml修改網路設定
（sudo mv *.yaml net.yaml 將網路設定的yaml重新命名成 net.yaml）&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;ssh 使用者@要連上的主機位置&lt;/p&gt;</content><category term="日誌"></category><category term="防寫卡"></category><category term="clonezilla"></category><category term="Ubuntu 20.04"></category><category term="硬碟複製"></category><category term="建立管理者"></category></entry><entry><title>Jul 5, 2020 日誌</title><link href=".%5CJul_05_%202020.html" rel="alternate"></link><published>2020-07-05T00:00:00+08:00</published><updated>2020-07-05T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-05:.\Jul_05_ 2020.html</id><summary type="html">&lt;p&gt;了解 delta printer 的正向與逆向運動方程式
</summary><content type="html">&lt;p&gt;了解 delta printer 的正向與逆向運動方程式

Delta printer是運用 Stewart Platform 機構修改出來的機構，一樣有6個自由度。
Stewart Platform 可伸縮連桿的部分 Delta printer 換成兩個連桿來達到同的功能。&lt;/p&gt;
&lt;p&gt;正向（順向）運動學（forward kinematics）&lt;/p&gt;
&lt;p&gt;由各關節變數求效應器（機構末端）的位置與方向角&lt;/p&gt;
&lt;p&gt;反向運動學（invers kinematics）&lt;/p&gt;
&lt;p&gt;由末端效應器（機構）的位置與方向求各關節變數&lt;/p&gt;</content><category term="日誌"></category><category term="機構"></category></entry><entry><title>Jul 4, 2020 日誌</title><link href=".%5CJul_04_%202020.html" rel="alternate"></link><published>2020-07-04T00:00:00+08:00</published><updated>2020-07-04T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-04:.\Jul_04_ 2020.html</id><summary type="html">&lt;p&gt;嘗試利用 Python程式將 Plican 網誌傳送到 Blogger，成功傳送到 Blogger。
</summary><content type="html">&lt;p&gt;嘗試利用 Python程式將 Plican 網誌傳送到 Blogger，成功傳送到 Blogger。

新增/編輯文章到blogger
到想新增/修改的文章對應到的markdown節點，按 add_to_mblogger 按鈕。想修改按 edit_to_mblogger按鈕。
修改成功的話會顯示：
post_id 為 一串文章的ID
已經將更新資料送往 M Blogger!&lt;/p&gt;
&lt;p&gt;文章內的圖片要放絕對位置（網址）&lt;/p&gt;
&lt;p&gt;若出現
&lt;pre class="brush: jscript"&gt;
google.auth.exceptions.RefreshError: ('invalid_scope: Some requested scopes were invalid. {invalid=[a, b, c, e, g, h, i, l, m, ., /, o, p, r, s, t, u, w, :]}', '{\n  "error": "invalid_scope",\n  "error_description": "Some requested scopes were invalid. {invalid\u003d[a, b, c, e, g, h, i, l, m, ., /, o, p, r, s, t, u, w, :]}",\n  "error_uri": "http://code.google.com/apis/accounts/docs/OAuth2.html"\n}')
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;重新轉一次.dat應該可以解決新增/編輯文章到blogger&lt;/p&gt;</content><category term="日誌"></category><category term="Blogger"></category></entry><entry><title>Jul 3, 2020 日誌</title><link href=".%5CJul_03_%202020.html" rel="alternate"></link><published>2020-07-03T00:00:00+08:00</published><updated>2020-07-03T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-03:.\Jul_03_ 2020.html</id><summary type="html">&lt;p&gt;嘗試利用 Python程式將 Plican 網誌傳送到 Blogger，但還沒成功。
將json轉檔成 .pickle 和 .dat
</summary><content type="html">&lt;p&gt;嘗試利用 Python程式將 Plican 網誌傳送到 Blogger，但還沒成功。
將json轉檔成 .pickle 和 .dat
&lt;/p&gt;
&lt;p&gt;想將Pelican網誌利用Pyrhon程式把文章傳到Blogger，我有參考&lt;a href="http://lab.mde.tw/blog/sync-pelican-and-blogger-content.html"&gt;新增 按鈕執行程式&lt;/a&gt;裡面的程式碼，&lt;a href="https://console.developers.google.com/apis/credentials"&gt;Google API&lt;/a&gt;新增Blogger API，去取得json的檔案。&lt;/p&gt;
&lt;p&gt;獲取client_secrets.json：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;登錄到您的@gm帳戶&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到&lt;a href="https://console.developers.google.com/apis/credentials"&gt;Google API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接受許可並創建Google API項目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;啟用Google Blogger API v3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;選擇內部用戶類型並添加新的應用程序名稱&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在“ API和服務”下，進入“憑證”頁面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;為電腦版應用程式創建“ OAuth 2.0客戶端ID”類型的憑據&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下載json檔&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下來&lt;a href="https://2019wcm.blogspot.com/2019/03/posted-via-python.html"&gt;測試json&lt;/a&gt;，裡面的程式碼是用來測試.json是否正常，正常的話再將.json轉檔成 .pickle 和 .dat。
到&lt;a href="https://github.com/mdecourse/project2020-1/tree/master/tools"&gt;project2020-1倉儲的tools&lt;/a&gt;gmail_json_to_pickle.py是將json轉成pickle，blogger_json_to_pickle.py也是轉成pickle，但存成dat。由於Blogger 憑證與 Gmail 憑證的差異在於 SCOPES 與 build 時 LIbrary 名稱與版本的差異，所以需要分別轉出來。&lt;/p&gt;
&lt;p&gt;轉出來的 .pickle 和 .dat 以及一開始下載的 .json 都需要放在倉儲目錄外部&lt;/p&gt;
&lt;p&gt;@button 裡面的程式，.dat要指到對應的檔案（剛剛轉出來的），blog_id是對應到該網誌ID，post_id則是代    表文章的ID&lt;/p&gt;</content><category term="日誌"></category><category term="Pelican"></category><category term="Blogger"></category><category term="API"></category><category term="json"></category><category term="OAuth 2.0"></category></entry><entry><title>Jul 1, 2020 日誌</title><link href=".%5CJul_01_2020.html" rel="alternate"></link><published>2020-07-01T00:00:00+08:00</published><updated>2020-07-01T00:00:00+08:00</updated><author><name>40723150</name></author><id>tag:None,2020-07-01:.\Jul_01_2020.html</id><summary type="html">&lt;p&gt;日誌
維修3D列印：噴嘴加熱和原點Z軸校正&lt;/p&gt;
</summary><content type="html">&lt;p&gt;日誌
維修3D列印：噴嘴加熱和原點Z軸校正&lt;/p&gt;


&lt;p&gt;維修張元學長那屆當時組的3D印表機，目前發現兩個問題&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;噴嘴加熱（無法加熱）  已解決
線路當時情況
&lt;img alt="./../images/原始接線.jpg" height="774" src="https://s40723150.github.io/UniversityProject/images/%E5%8E%9F%E5%A7%8B%E6%8E%A5%E7%B7%9A.jpg" width="581"&gt;
&lt;strong&gt;原始接線&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="./../images/各插槽功能.jpg" height="409" src="https://s40723150.github.io/UniversityProject/images/%E5%90%84%E6%8F%92%E6%A7%BD%E5%8A%9F%E8%83%BD.jpg" width="512"&gt;
&lt;strong&gt;各插槽功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="./../images/修正後_接線.jpg" height="729" src="https://s40723150.github.io/UniversityProject/images/%E4%BF%AE%E6%AD%A3%E5%BE%8C_%E6%8E%A5%E7%B7%9A.jpg" width="541"&gt;
&lt;strong&gt;修正後(噴頭接A13，底板加熱A14)&lt;/strong&gt;
2. Z軸歸零後與底板還有一段距離
我們一開始先讓機器回歸原點，發現離下面的平台至少有14mm左右，然後稍微嘗試一下，發現印表機的介面沒有可以單獨控制Z軸的選項，只有L R B三個回歸原點和Home All（同Auto home的功能），所以初步推測要校正Z軸原點的位置可能需要去修改firmware（韌體），在網路上一番搜尋後，找到Marlin和Repetier都是可以裝在控制3D印表機的韌體。後來大三學長拿了之前學長的書面資料給我們看，發現當時是使用Repetier的firmware，其中"Configuration.h"是機台主要參數設定的檔，&lt;a href="https://www.repetier.com/firmware/v091/"&gt;repetier firmware&lt;/a&gt;可以上傳舊的Configuration.h 或 config.json進行參數設定的更新。&lt;/p&gt;
&lt;p&gt;連接3D印表機控制板的USB線到電腦後就出現COM3&lt;/p&gt;
&lt;p&gt;&lt;img alt="./../images/連接.png" height="325" src="https://s40723150.github.io/UniversityProject/images/%E9%80%A3%E6%8E%A5.png" width="576"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;將操控板連到電腦當時讀到的位置是COM3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="./../images/Pronterface 介面.png" height="430" src="https://s40723150.github.io/UniversityProject/images/Pronterface%20%E4%BB%8B%E9%9D%A2.png" width="672"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pronterface 介面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pronterface 可以透過介面上按鈕或是G-cord控制3D印表機噴頭位置，選到正確的Port按connect就可以連上。&lt;/p&gt;
&lt;p&gt;File link&lt;/p&gt;
&lt;p&gt;&lt;img alt="./../images/連接.png" src="https://s40723150.github.io/UniversityProject/images/Files_list.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;當時下載的檔案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.repetier.com/firmware/v100/config.php?a=downloadAll"&gt;https://www.repetier.com/firmware/v100/config.php?a=downloadAll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://download.repetier.com/files/host/win/setupRepetierHost_2_1_6.exe"&gt;http://download.repetier.com/files/host/win/setupRepetierHost_2_1_6.exe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kliment.kapsi.fi/printrun/Printrun-win-18Nov2017.zip"&gt;http://kliment.kapsi.fi/printrun/Printrun-win-18Nov2017.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Website URL&lt;/p&gt;
&lt;p&gt;&lt;a href="https://forum.duet3d.com/topic/3800/resetting-the-origin-of-a-delta"&gt;https://forum.duet3d.com/topic/3800/resetting-the-origin-of-a-delta&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.pronterface.com/"&gt;https://www.pronterface.com/&lt;/a&gt;&lt;/p&gt;</content><category term="日誌"></category><category term="3Dprint"></category></entry></feed>